// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: speakeasy/v1/speakeasy.proto

package v1

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Drink_DrinkType int32

const (
	Drink_DRINK_TYPE_UNSPECIFIED Drink_DrinkType = 0
	Drink_DRINK_TYPE_WINE        Drink_DrinkType = 1
	Drink_DRINK_TYPE_COCKTAIL    Drink_DrinkType = 2
	Drink_DRINK_TYPE_MOCKTAIL    Drink_DrinkType = 3
	Drink_DRINK_TYPE_SOFT        Drink_DrinkType = 4
	Drink_DRINK_TYPE_SPIRIT      Drink_DrinkType = 5
	Drink_DRINK_TYPE_OTHER       Drink_DrinkType = 6
	Drink_DRINK_TYPE_BEER        Drink_DrinkType = 7
)

// Enum value maps for Drink_DrinkType.
var (
	Drink_DrinkType_name = map[int32]string{
		0: "DRINK_TYPE_UNSPECIFIED",
		1: "DRINK_TYPE_WINE",
		2: "DRINK_TYPE_COCKTAIL",
		3: "DRINK_TYPE_MOCKTAIL",
		4: "DRINK_TYPE_SOFT",
		5: "DRINK_TYPE_SPIRIT",
		6: "DRINK_TYPE_OTHER",
		7: "DRINK_TYPE_BEER",
	}
	Drink_DrinkType_value = map[string]int32{
		"DRINK_TYPE_UNSPECIFIED": 0,
		"DRINK_TYPE_WINE":        1,
		"DRINK_TYPE_COCKTAIL":    2,
		"DRINK_TYPE_MOCKTAIL":    3,
		"DRINK_TYPE_SOFT":        4,
		"DRINK_TYPE_SPIRIT":      5,
		"DRINK_TYPE_OTHER":       6,
		"DRINK_TYPE_BEER":        7,
	}
)

func (x Drink_DrinkType) Enum() *Drink_DrinkType {
	p := new(Drink_DrinkType)
	*p = x
	return p
}

func (x Drink_DrinkType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Drink_DrinkType) Descriptor() protoreflect.EnumDescriptor {
	return file_speakeasy_v1_speakeasy_proto_enumTypes[0].Descriptor()
}

func (Drink_DrinkType) Type() protoreflect.EnumType {
	return &file_speakeasy_v1_speakeasy_proto_enumTypes[0]
}

func (x Drink_DrinkType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Drink_DrinkType.Descriptor instead.
func (Drink_DrinkType) EnumDescriptor() ([]byte, []int) {
	return file_speakeasy_v1_speakeasy_proto_rawDescGZIP(), []int{0, 0}
}

type Drink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string          `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type        Drink_DrinkType `protobuf:"varint,2,opt,name=type,proto3,enum=speakeasy.Drink_DrinkType" json:"type,omitempty"`
	Price       float64         `protobuf:"fixed64,3,opt,name=price,proto3" json:"price,omitempty"`
	Stock       int32           `protobuf:"varint,4,opt,name=stock,proto3" json:"stock,omitempty"`
	ProductCode string          `protobuf:"bytes,5,opt,name=productCode,proto3" json:"productCode,omitempty"`
}

func (x *Drink) Reset() {
	*x = Drink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_speakeasy_v1_speakeasy_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Drink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Drink) ProtoMessage() {}

func (x *Drink) ProtoReflect() protoreflect.Message {
	mi := &file_speakeasy_v1_speakeasy_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Drink.ProtoReflect.Descriptor instead.
func (*Drink) Descriptor() ([]byte, []int) {
	return file_speakeasy_v1_speakeasy_proto_rawDescGZIP(), []int{0}
}

func (x *Drink) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Drink) GetType() Drink_DrinkType {
	if x != nil {
		return x.Type
	}
	return Drink_DRINK_TYPE_UNSPECIFIED
}

func (x *Drink) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *Drink) GetStock() int32 {
	if x != nil {
		return x.Stock
	}
	return 0
}

func (x *Drink) GetProductCode() string {
	if x != nil {
		return x.ProductCode
	}
	return ""
}

type ListDrinksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Drinks []*Drink `protobuf:"bytes,1,rep,name=drinks,proto3" json:"drinks,omitempty"`
}

func (x *ListDrinksResponse) Reset() {
	*x = ListDrinksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_speakeasy_v1_speakeasy_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDrinksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDrinksResponse) ProtoMessage() {}

func (x *ListDrinksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_speakeasy_v1_speakeasy_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDrinksResponse.ProtoReflect.Descriptor instead.
func (*ListDrinksResponse) Descriptor() ([]byte, []int) {
	return file_speakeasy_v1_speakeasy_proto_rawDescGZIP(), []int{1}
}

func (x *ListDrinksResponse) GetDrinks() []*Drink {
	if x != nil {
		return x.Drinks
	}
	return nil
}

type ListDrinksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Empty *emptypb.Empty `protobuf:"bytes,1,opt,name=empty,proto3" json:"empty,omitempty"`
}

func (x *ListDrinksRequest) Reset() {
	*x = ListDrinksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_speakeasy_v1_speakeasy_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDrinksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDrinksRequest) ProtoMessage() {}

func (x *ListDrinksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_speakeasy_v1_speakeasy_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDrinksRequest.ProtoReflect.Descriptor instead.
func (*ListDrinksRequest) Descriptor() ([]byte, []int) {
	return file_speakeasy_v1_speakeasy_proto_rawDescGZIP(), []int{2}
}

func (x *ListDrinksRequest) GetEmpty() *emptypb.Empty {
	if x != nil {
		return x.Empty
	}
	return nil
}

type GetDrinkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Drink *Drink `protobuf:"bytes,1,opt,name=drink,proto3" json:"drink,omitempty"`
}

func (x *GetDrinkResponse) Reset() {
	*x = GetDrinkResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_speakeasy_v1_speakeasy_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDrinkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDrinkResponse) ProtoMessage() {}

func (x *GetDrinkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_speakeasy_v1_speakeasy_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDrinkResponse.ProtoReflect.Descriptor instead.
func (*GetDrinkResponse) Descriptor() ([]byte, []int) {
	return file_speakeasy_v1_speakeasy_proto_rawDescGZIP(), []int{3}
}

func (x *GetDrinkResponse) GetDrink() *Drink {
	if x != nil {
		return x.Drink
	}
	return nil
}

type GetDrinkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductCode string `protobuf:"bytes,1,opt,name=product_code,json=productCode,proto3" json:"product_code,omitempty"`
}

func (x *GetDrinkRequest) Reset() {
	*x = GetDrinkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_speakeasy_v1_speakeasy_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDrinkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDrinkRequest) ProtoMessage() {}

func (x *GetDrinkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_speakeasy_v1_speakeasy_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDrinkRequest.ProtoReflect.Descriptor instead.
func (*GetDrinkRequest) Descriptor() ([]byte, []int) {
	return file_speakeasy_v1_speakeasy_proto_rawDescGZIP(), []int{4}
}

func (x *GetDrinkRequest) GetProductCode() string {
	if x != nil {
		return x.ProductCode
	}
	return ""
}

var File_speakeasy_v1_speakeasy_proto protoreflect.FileDescriptor

var file_speakeasy_v1_speakeasy_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x61, 0x73, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x73,
	0x70, 0x65, 0x61, 0x6b, 0x65, 0x61, 0x73, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09,
	0x73, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x61, 0x73, 0x79, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65,
	0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf0, 0x06, 0x0a, 0x05, 0x44, 0x72, 0x69, 0x6e, 0x6b, 0x12,
	0x42, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0x92,
	0x41, 0x28, 0x32, 0x15, 0x54, 0x68, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x64, 0x72, 0x69, 0x6e, 0x6b, 0x4a, 0x0f, 0x22, 0x47, 0x69, 0x6e, 0x20,
	0x61, 0x6e, 0x64, 0x20, 0x54, 0x6f, 0x6e, 0x69, 0x63, 0x22, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x60, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1a, 0x2e, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x61, 0x73, 0x79, 0x2e, 0x44, 0x72,
	0x69, 0x6e, 0x6b, 0x2e, 0x44, 0x72, 0x69, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x42, 0x30, 0x92,
	0x41, 0x2a, 0x32, 0x11, 0x54, 0x68, 0x65, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x6f, 0x66, 0x20,
	0x64, 0x72, 0x69, 0x6e, 0x6b, 0x4a, 0x15, 0x22, 0x44, 0x52, 0x49, 0x4e, 0x4b, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x43, 0x4f, 0x43, 0x4b, 0x54, 0x41, 0x49, 0x4c, 0x22, 0xe0, 0x41, 0x02, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x37, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x01, 0x42, 0x21, 0x92, 0x41, 0x1e, 0x32, 0x16, 0x54, 0x68, 0x65, 0x20, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x72, 0x69, 0x6e,
	0x6b, 0x4a, 0x04, 0x35, 0x2e, 0x39, 0x39, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x35,
	0x0a, 0x05, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x1f, 0x92,
	0x41, 0x1c, 0x32, 0x16, 0x54, 0x68, 0x65, 0x20, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x20, 0x6f, 0x66,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x72, 0x69, 0x6e, 0x6b, 0x4a, 0x02, 0x31, 0x30, 0x52, 0x05,
	0x73, 0x74, 0x6f, 0x63, 0x6b, 0x12, 0xcb, 0x01, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0xa8, 0x01, 0x92, 0x41,
	0xa4, 0x01, 0x32, 0x2b, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x20, 0x64, 0x72, 0x69, 0x6e, 0x6b,
	0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x20, 0x66, 0x6f, 0x72, 0x20,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x4a,
	0x26, 0x22, 0x32, 0x34, 0x33, 0x38, 0x61, 0x63, 0x33, 0x63, 0x2d, 0x33, 0x37, 0x65, 0x62, 0x2d,
	0x34, 0x39, 0x30, 0x32, 0x2d, 0x61, 0x64, 0x65, 0x66, 0x2d, 0x65, 0x64, 0x31, 0x36, 0x62, 0x34,
	0x34, 0x33, 0x31, 0x30, 0x33, 0x30, 0x22, 0x8a, 0x01, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x41,
	0x2d, 0x46, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x41, 0x2d, 0x46, 0x5d, 0x7b,
	0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x41, 0x2d, 0x46, 0x5d, 0x7b, 0x33, 0x7d, 0x2d,
	0x5b, 0x38, 0x39, 0x41, 0x42, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x41, 0x2d, 0x46, 0x5d, 0x7b, 0x33,
	0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x41, 0x2d, 0x46, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0xa2,
	0x02, 0x04, 0x75, 0x75, 0x69, 0x64, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x22, 0xc5, 0x01, 0x0a, 0x09, 0x44, 0x72, 0x69, 0x6e, 0x6b, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1a, 0x0a, 0x16, 0x44, 0x52, 0x49, 0x4e, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a,
	0x0f, 0x44, 0x52, 0x49, 0x4e, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x49, 0x4e, 0x45,
	0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x44, 0x52, 0x49, 0x4e, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x43, 0x4f, 0x43, 0x4b, 0x54, 0x41, 0x49, 0x4c, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x44,
	0x52, 0x49, 0x4e, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x4f, 0x43, 0x4b, 0x54, 0x41,
	0x49, 0x4c, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x44, 0x52, 0x49, 0x4e, 0x4b, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x53, 0x4f, 0x46, 0x54, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x52, 0x49,
	0x4e, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x50, 0x49, 0x52, 0x49, 0x54, 0x10, 0x05,
	0x12, 0x14, 0x0a, 0x10, 0x44, 0x52, 0x49, 0x4e, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f,
	0x54, 0x48, 0x45, 0x52, 0x10, 0x06, 0x12, 0x13, 0x0a, 0x0f, 0x44, 0x52, 0x49, 0x4e, 0x4b, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x45, 0x45, 0x52, 0x10, 0x07, 0x3a, 0xba, 0x01, 0x92, 0x41,
	0xb6, 0x01, 0x0a, 0x2a, 0x2a, 0x07, 0x41, 0x20, 0x64, 0x72, 0x69, 0x6e, 0x6b, 0x32, 0x1f, 0x41,
	0x20, 0x64, 0x72, 0x69, 0x6e, 0x6b, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x20, 0x61, 0x74,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x61, 0x73, 0x79, 0x32, 0x87,
	0x01, 0x7b, 0x22, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3a, 0x20, 0x22, 0x47, 0x69, 0x6e, 0x20, 0x61,
	0x6e, 0x64, 0x20, 0x54, 0x6f, 0x6e, 0x69, 0x63, 0x22, 0x2c, 0x22, 0x74, 0x79, 0x70, 0x65, 0x22,
	0x3a, 0x20, 0x22, 0x44, 0x52, 0x49, 0x4e, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f,
	0x43, 0x4b, 0x54, 0x41, 0x49, 0x4c, 0x22, 0x2c, 0x22, 0x70, 0x72, 0x69, 0x63, 0x65, 0x22, 0x3a,
	0x20, 0x35, 0x2e, 0x39, 0x39, 0x2c, 0x22, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x22, 0x3a, 0x20, 0x31,
	0x30, 0x2c, 0x22, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x3a,
	0x20, 0x22, 0x32, 0x34, 0x33, 0x38, 0x61, 0x63, 0x33, 0x63, 0x2d, 0x33, 0x37, 0x65, 0x62, 0x2d,
	0x34, 0x39, 0x30, 0x32, 0x2d, 0x61, 0x64, 0x65, 0x66, 0x2d, 0x65, 0x64, 0x31, 0x36, 0x62, 0x34,
	0x34, 0x33, 0x31, 0x30, 0x33, 0x30, 0x22, 0x7d, 0x22, 0x3e, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74,
	0x44, 0x72, 0x69, 0x6e, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28,
	0x0a, 0x06, 0x64, 0x72, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x61, 0x73, 0x79, 0x2e, 0x44, 0x72, 0x69, 0x6e, 0x6b,
	0x52, 0x06, 0x64, 0x72, 0x69, 0x6e, 0x6b, 0x73, 0x22, 0x41, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74,
	0x44, 0x72, 0x69, 0x6e, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a,
	0x05, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x3a, 0x0a, 0x10, 0x47,
	0x65, 0x74, 0x44, 0x72, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x26, 0x0a, 0x05, 0x64, 0x72, 0x69, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x61, 0x73, 0x79, 0x2e, 0x44, 0x72, 0x69, 0x6e, 0x6b,
	0x52, 0x05, 0x64, 0x72, 0x69, 0x6e, 0x6b, 0x22, 0xcc, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x44,
	0x72, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0xb8, 0x01, 0x0a, 0x0c,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x94, 0x01, 0x92, 0x41, 0x90, 0x01, 0x32, 0x17, 0x55, 0x6e, 0x69, 0x71, 0x75,
	0x65, 0x20, 0x64, 0x72, 0x69, 0x6e, 0x6b, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x4a, 0x26, 0x22, 0x32, 0x34, 0x33, 0x38, 0x61, 0x63, 0x33, 0x63, 0x2d, 0x33, 0x37,
	0x65, 0x62, 0x2d, 0x34, 0x39, 0x30, 0x32, 0x2d, 0x61, 0x64, 0x65, 0x66, 0x2d, 0x65, 0x64, 0x31,
	0x36, 0x62, 0x34, 0x34, 0x33, 0x31, 0x30, 0x33, 0x30, 0x22, 0x8a, 0x01, 0x45, 0x5e, 0x5b, 0x30,
	0x2d, 0x39, 0x41, 0x2d, 0x46, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x41, 0x2d,
	0x46, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x41, 0x2d, 0x46, 0x5d, 0x7b,
	0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x41, 0x42, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x41, 0x2d, 0x46,
	0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x41, 0x2d, 0x46, 0x5d, 0x7b, 0x31, 0x32,
	0x7d, 0x24, 0xa2, 0x02, 0x04, 0x75, 0x75, 0x69, 0x64, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x32, 0xdf, 0x04, 0x0a, 0x10, 0x53, 0x70, 0x65, 0x61, 0x6b,
	0x65, 0x61, 0x73, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xcf, 0x01, 0x0a, 0x0a,
	0x4c, 0x69, 0x73, 0x74, 0x44, 0x72, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x1c, 0x2e, 0x73, 0x70, 0x65,
	0x61, 0x6b, 0x65, 0x61, 0x73, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x72, 0x69, 0x6e, 0x6b,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x73, 0x70, 0x65, 0x61, 0x6b,
	0x65, 0x61, 0x73, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x72, 0x69, 0x6e, 0x6b, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x83, 0x01, 0x92, 0x41, 0x66, 0x0a, 0x06, 0x64,
	0x72, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x14, 0x47, 0x65, 0x74, 0x20, 0x61, 0x20, 0x6c, 0x69, 0x73,
	0x74, 0x20, 0x6f, 0x66, 0x20, 0x64, 0x72, 0x69, 0x6e, 0x6b, 0x73, 0x1a, 0x37, 0x52, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x73, 0x20, 0x61, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x61,
	0x6c, 0x6c, 0x20, 0x64, 0x72, 0x69, 0x6e, 0x6b, 0x73, 0x20, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x20, 0x61, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x70, 0x65, 0x61, 0x6b,
	0x65, 0x61, 0x73, 0x79, 0x2a, 0x0d, 0x6c, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x6c, 0x44, 0x72, 0x69,
	0x6e, 0x6b, 0x73, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x62, 0x06, 0x64, 0x72, 0x69, 0x6e, 0x6b,
	0x73, 0x12, 0x0a, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x72, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0xf8, 0x02,
	0x0a, 0x08, 0x47, 0x65, 0x74, 0x44, 0x72, 0x69, 0x6e, 0x6b, 0x12, 0x1a, 0x2e, 0x73, 0x70, 0x65,
	0x61, 0x6b, 0x65, 0x61, 0x73, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x72, 0x69, 0x6e, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x61,
	0x73, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x72, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0xb2, 0x02, 0x92, 0x41, 0x86, 0x02, 0x0a, 0x06, 0x64, 0x72, 0x69, 0x6e,
	0x6b, 0x73, 0x12, 0x0b, 0x47, 0x65, 0x74, 0x20, 0x61, 0x20, 0x64, 0x72, 0x69, 0x6e, 0x6b, 0x2a,
	0x08, 0x67, 0x65, 0x74, 0x44, 0x72, 0x69, 0x6e, 0x6b, 0x6a, 0xe4, 0x01, 0x0a, 0x13, 0x78, 0x2d,
	0x73, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x61, 0x73, 0x79, 0x2d, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x12, 0xcc, 0x01, 0x2a, 0xc9, 0x01, 0x0a, 0x79, 0x0a, 0x07, 0x62, 0x61, 0x63, 0x6b, 0x6f,
	0x66, 0x66, 0x12, 0x6e, 0x2a, 0x6c, 0x0a, 0x15, 0x0a, 0x08, 0x65, 0x78, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x12, 0x09, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x3f, 0x0a, 0x1c, 0x0a,
	0x0f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x12, 0x09, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x7f, 0x40, 0x0a, 0x1b, 0x0a, 0x0e, 0x6d,
	0x61, 0x78, 0x45, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x09, 0x11,
	0x00, 0x00, 0x00, 0x00, 0x40, 0x77, 0x4b, 0x41, 0x0a, 0x18, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x09, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c,
	0xed, 0x40, 0x0a, 0x1b, 0x0a, 0x15, 0x72, 0x65, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x02, 0x20, 0x01, 0x0a,
	0x18, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x09,
	0x32, 0x07, 0x0a, 0x05, 0x1a, 0x03, 0x35, 0x58, 0x58, 0x0a, 0x15, 0x0a, 0x08, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x09, 0x1a, 0x07, 0x62, 0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x62, 0x05, 0x64, 0x72, 0x69, 0x6e, 0x6b, 0x12, 0x19, 0x2f,
	0x76, 0x31, 0x2f, 0x64, 0x72, 0x69, 0x6e, 0x6b, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x7d, 0x42, 0xed, 0x02, 0x92, 0x41, 0xba, 0x01, 0x12,
	0x2f, 0x0a, 0x0d, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x61, 0x73, 0x79, 0x20, 0x41, 0x50, 0x49,
	0x12, 0x19, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x61, 0x73, 0x79, 0x20, 0x41, 0x50, 0x49, 0x20,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0x03, 0x31, 0x2e, 0x30,
	0x1a, 0x0e, 0x31, 0x32, 0x37, 0x2e, 0x30, 0x2e, 0x30, 0x2e, 0x31, 0x3a, 0x38, 0x30, 0x38, 0x30,
	0x2a, 0x01, 0x02, 0x6a, 0x14, 0x0a, 0x06, 0x64, 0x72, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x0a, 0x44,
	0x72, 0x69, 0x6e, 0x6b, 0x73, 0x20, 0x41, 0x50, 0x49, 0x72, 0x5e, 0x0a, 0x1b, 0x53, 0x70, 0x65,
	0x61, 0x6b, 0x65, 0x61, 0x73, 0x79, 0x20, 0x41, 0x50, 0x49, 0x20, 0x64, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a,
	0x2f, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x70, 0x65,
	0x61, 0x6b, 0x65, 0x61, 0x73, 0x79, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x70, 0x65, 0x61, 0x6b,
	0x65, 0x61, 0x73, 0x79, 0x2d, 0x67, 0x72, 0x70, 0x63, 0x2d, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x2d, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x2e, 0x73,
	0x70, 0x65, 0x61, 0x6b, 0x65, 0x61, 0x73, 0x79, 0x42, 0x0e, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x65,
	0x61, 0x73, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x4a, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x61, 0x73, 0x79,
	0x2d, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x61, 0x73, 0x79, 0x2d, 0x67,
	0x72, 0x70, 0x63, 0x2d, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2d, 0x65, 0x78, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x65,
	0x61, 0x73, 0x79, 0x2f, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x53, 0x58, 0x58, 0xaa, 0x02, 0x09, 0x53,
	0x70, 0x65, 0x61, 0x6b, 0x65, 0x61, 0x73, 0x79, 0xca, 0x02, 0x09, 0x53, 0x70, 0x65, 0x61, 0x6b,
	0x65, 0x61, 0x73, 0x79, 0xe2, 0x02, 0x15, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x61, 0x73, 0x79,
	0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x09, 0x53,
	0x70, 0x65, 0x61, 0x6b, 0x65, 0x61, 0x73, 0x79, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_speakeasy_v1_speakeasy_proto_rawDescOnce sync.Once
	file_speakeasy_v1_speakeasy_proto_rawDescData = file_speakeasy_v1_speakeasy_proto_rawDesc
)

func file_speakeasy_v1_speakeasy_proto_rawDescGZIP() []byte {
	file_speakeasy_v1_speakeasy_proto_rawDescOnce.Do(func() {
		file_speakeasy_v1_speakeasy_proto_rawDescData = protoimpl.X.CompressGZIP(file_speakeasy_v1_speakeasy_proto_rawDescData)
	})
	return file_speakeasy_v1_speakeasy_proto_rawDescData
}

var file_speakeasy_v1_speakeasy_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_speakeasy_v1_speakeasy_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_speakeasy_v1_speakeasy_proto_goTypes = []interface{}{
	(Drink_DrinkType)(0),       // 0: speakeasy.Drink.DrinkType
	(*Drink)(nil),              // 1: speakeasy.Drink
	(*ListDrinksResponse)(nil), // 2: speakeasy.ListDrinksResponse
	(*ListDrinksRequest)(nil),  // 3: speakeasy.ListDrinksRequest
	(*GetDrinkResponse)(nil),   // 4: speakeasy.GetDrinkResponse
	(*GetDrinkRequest)(nil),    // 5: speakeasy.GetDrinkRequest
	(*emptypb.Empty)(nil),      // 6: google.protobuf.Empty
}
var file_speakeasy_v1_speakeasy_proto_depIdxs = []int32{
	0, // 0: speakeasy.Drink.type:type_name -> speakeasy.Drink.DrinkType
	1, // 1: speakeasy.ListDrinksResponse.drinks:type_name -> speakeasy.Drink
	6, // 2: speakeasy.ListDrinksRequest.empty:type_name -> google.protobuf.Empty
	1, // 3: speakeasy.GetDrinkResponse.drink:type_name -> speakeasy.Drink
	3, // 4: speakeasy.SpeakeasyService.ListDrinks:input_type -> speakeasy.ListDrinksRequest
	5, // 5: speakeasy.SpeakeasyService.GetDrink:input_type -> speakeasy.GetDrinkRequest
	2, // 6: speakeasy.SpeakeasyService.ListDrinks:output_type -> speakeasy.ListDrinksResponse
	4, // 7: speakeasy.SpeakeasyService.GetDrink:output_type -> speakeasy.GetDrinkResponse
	6, // [6:8] is the sub-list for method output_type
	4, // [4:6] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_speakeasy_v1_speakeasy_proto_init() }
func file_speakeasy_v1_speakeasy_proto_init() {
	if File_speakeasy_v1_speakeasy_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_speakeasy_v1_speakeasy_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Drink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_speakeasy_v1_speakeasy_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDrinksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_speakeasy_v1_speakeasy_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDrinksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_speakeasy_v1_speakeasy_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDrinkResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_speakeasy_v1_speakeasy_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDrinkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_speakeasy_v1_speakeasy_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_speakeasy_v1_speakeasy_proto_goTypes,
		DependencyIndexes: file_speakeasy_v1_speakeasy_proto_depIdxs,
		EnumInfos:         file_speakeasy_v1_speakeasy_proto_enumTypes,
		MessageInfos:      file_speakeasy_v1_speakeasy_proto_msgTypes,
	}.Build()
	File_speakeasy_v1_speakeasy_proto = out.File
	file_speakeasy_v1_speakeasy_proto_rawDesc = nil
	file_speakeasy_v1_speakeasy_proto_goTypes = nil
	file_speakeasy_v1_speakeasy_proto_depIdxs = nil
}
