// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: speakeasy/v1/speakeasy.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SpeakeasyService_ListDrinks_FullMethodName = "/speakeasy.SpeakeasyService/ListDrinks"
	SpeakeasyService_GetDrink_FullMethodName   = "/speakeasy.SpeakeasyService/GetDrink"
)

// SpeakeasyServiceClient is the client API for SpeakeasyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SpeakeasyServiceClient interface {
	// List all drinks
	ListDrinks(ctx context.Context, in *ListDrinksRequest, opts ...grpc.CallOption) (*ListDrinksResponse, error)
	// Get a drink by product code
	GetDrink(ctx context.Context, in *GetDrinkRequest, opts ...grpc.CallOption) (*GetDrinkResponse, error)
}

type speakeasyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSpeakeasyServiceClient(cc grpc.ClientConnInterface) SpeakeasyServiceClient {
	return &speakeasyServiceClient{cc}
}

func (c *speakeasyServiceClient) ListDrinks(ctx context.Context, in *ListDrinksRequest, opts ...grpc.CallOption) (*ListDrinksResponse, error) {
	out := new(ListDrinksResponse)
	err := c.cc.Invoke(ctx, SpeakeasyService_ListDrinks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *speakeasyServiceClient) GetDrink(ctx context.Context, in *GetDrinkRequest, opts ...grpc.CallOption) (*GetDrinkResponse, error) {
	out := new(GetDrinkResponse)
	err := c.cc.Invoke(ctx, SpeakeasyService_GetDrink_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SpeakeasyServiceServer is the server API for SpeakeasyService service.
// All implementations should embed UnimplementedSpeakeasyServiceServer
// for forward compatibility
type SpeakeasyServiceServer interface {
	// List all drinks
	ListDrinks(context.Context, *ListDrinksRequest) (*ListDrinksResponse, error)
	// Get a drink by product code
	GetDrink(context.Context, *GetDrinkRequest) (*GetDrinkResponse, error)
}

// UnimplementedSpeakeasyServiceServer should be embedded to have forward compatible implementations.
type UnimplementedSpeakeasyServiceServer struct {
}

func (UnimplementedSpeakeasyServiceServer) ListDrinks(context.Context, *ListDrinksRequest) (*ListDrinksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDrinks not implemented")
}
func (UnimplementedSpeakeasyServiceServer) GetDrink(context.Context, *GetDrinkRequest) (*GetDrinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDrink not implemented")
}

// UnsafeSpeakeasyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SpeakeasyServiceServer will
// result in compilation errors.
type UnsafeSpeakeasyServiceServer interface {
	mustEmbedUnimplementedSpeakeasyServiceServer()
}

func RegisterSpeakeasyServiceServer(s grpc.ServiceRegistrar, srv SpeakeasyServiceServer) {
	s.RegisterService(&SpeakeasyService_ServiceDesc, srv)
}

func _SpeakeasyService_ListDrinks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDrinksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpeakeasyServiceServer).ListDrinks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpeakeasyService_ListDrinks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpeakeasyServiceServer).ListDrinks(ctx, req.(*ListDrinksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpeakeasyService_GetDrink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDrinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpeakeasyServiceServer).GetDrink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpeakeasyService_GetDrink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpeakeasyServiceServer).GetDrink(ctx, req.(*GetDrinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SpeakeasyService_ServiceDesc is the grpc.ServiceDesc for SpeakeasyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SpeakeasyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "speakeasy.SpeakeasyService",
	HandlerType: (*SpeakeasyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListDrinks",
			Handler:    _SpeakeasyService_ListDrinks_Handler,
		},
		{
			MethodName: "GetDrink",
			Handler:    _SpeakeasyService_GetDrink_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "speakeasy/v1/speakeasy.proto",
}
